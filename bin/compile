#!/bin/sh

# Load our configuration variables.
. "$1/RustConfig"

# Standard paranoia.
set -e
set -u

# Check our configuration options.
if [ -z "${VERSION+x}" ]; then
  echo "failed: RustConfig must set VERSION to indicate the Rust version."
  exit 1
fi
if [ -z "${URL+x}" ]; then
  URL="https://static.rust-lang.org/dist/rust-$VERSION-x86_64-unknown-linux-gnu.tar.gz"
fi

# Notify users running old, unstable versions of Rust about how to deploy
# successfully.
if [ -z "${CARGO_URL+x}" ] || [ ! -f "$1/Cargo.toml" ]; then
    echo <<EOF
To deploy a modern Rust app, make sure you have a Cargo.toml file, and that
you do not define CARGO_URL or CARGO_VERSION in RustConfig.  If you're
using an older version of Rust, and you need to re-deploy an existing
application, try setting your buildpack to:

  https://github.com/emk/heroku-buildpack-rust.git#old-rust
EOF
fi

# Switch to our cache directory.
mkdir -p "$2"
cd "$2"

mkdir -p "$1/target/release"
rust_deps="$2/rust-release-deps"
if [ -d "${rust_deps}" ]; then
  mv "${rust_deps}" "$1/target/release/deps"
fi
rust_build="$2/rust-release-build"
if [ -d "${rust_build}" ]; then
  mv "${rust_build}" "$1/target/release/build"
fi

# Make sure we have the correct Rust binaries and set up PATH.
rust_path="$2/rust-$VERSION/"
rust_tmp="$2/rust-tmp-$VERSION/"
if [ -d "$rust_path" ]; then
  echo "-----> Using Rust version $VERSION"
else
  echo "-----> Downloading Rust version $VERSION binaries from $URL"

  rm -f rust.tar.gz
  rm -rf rust-tmp-*
  curl -o rust.tar.gz "$URL"

  echo "-----> Extracting Rust binaries"

  mkdir "${rust_tmp}"
  tar xzf rust.tar.gz -C "${rust_tmp}"
  "$(ls -1d "${rust_tmp}"/*)/install.sh" --prefix="${rust_path}" --disable-ldconfig
  rm -r rust.tar.gz "${rust_tmp}"
fi
if [ ! -x "$rust_path/bin/rustc" ]; then
    echo "failed: Cannot find Rust binaries at $rust_path/bin"
    exit 1
fi
PATH="$rust_path/bin:$PATH"
LD_LIBRARY_PATH="$rust_path/lib${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH
echo "$LD_LIBRARY_PATH"

# Make sure we have a fake home directory for the Cargo cache.  Ideally
# we would keep these in our cache, but our ".git" directories don't
# survive between builds.
cargo_home=$2

# Build the actual application using Cargo.
echo "-----> Building application using Cargo"

cd "$1"
# To debug git issues:
#export RUST_LOG="cargo::sources::git=debug"
HOME="$cargo_home" cargo build --verbose --release

mv "$1/target/release/deps" "${rust_deps}"
mv "$1/target/release/build" "${rust_build}"
